---
const { id, label } = Astro.props;
const posts = await Astro.glob("/src/content/docs/glossary/*.md");
const regex = new RegExp(`${id}\.md$|${id}\.mdx$`);
const filtered = posts.find((post) => post.file.match(regex));
const htmlSplit = filtered?.compiledContent()?.toString()?.split("<hr>") || [];
const basePath = `/${Astro.url.pathname.split("/")[1]}/`;
const glossaryUrl = `${basePath}glossary/${id}`;
---

<my-modal
	class="modal-dialog-button"
	tabindex="0"
	data-tippy-maxWidth="100"
	data-id={id}
	data-html={`${htmlSplit[0]}<hr class="glossary-separator"><div class="glossary-url-div" id="${id}-glossary-url">ðŸŸ© <a class="glossary-url" href=${glossaryUrl} target="_blank">Click here for the full Glossary entry</a></div>`}
	data-html-more={htmlSplit[1]}
>
	<a class="glossary-url dialog-button-open" id={`${id}-open`}>{label}</a>
</my-modal>

<script>
	class MyModal extends HTMLElement {
		constructor() {
			super();
			const id = this.dataset.id ?? "";
			const idDialog = `${id}-dialog`;
			const idContent = `${id}-content`;
			const buttonId = `${id}-open`;
			const buttonClose = `${id}-close`;
			const buttonMore = `${id}-more`;
			const showMore = `${id}-show-more`;
			const glossaryUrl = `${id}-glossary-url`;
			const html = this.dataset.html ?? "";
			const htmlMore = this.dataset.htmlMore ?? "";

			const body = document.querySelector("body");
			if (!body) {
				return;
			}

			body.insertAdjacentHTML(
				"beforeend",
				`<dialog class="modal-dialog" id="${idDialog}">
                    <div class="dialog-content" id="${idContent}"></div>
                    <div class="dialog-button">
                        <div class="dialog-show-more" id="${showMore}" style="display: none"></div>
                        <button class="dialog-button-close" id="${buttonClose}" type="reset">Close this Dialog</button>
                        <button class="dialog-button-more" id="${buttonMore}" type="reset">Show more</button>
                    </div>
                </dialog>`
			);

			const dialogDiv = document.getElementById(idContent);
			const dialogMoreDiv = document.getElementById(showMore);

			if (dialogDiv) {
				dialogDiv.innerHTML = html;
			}

			if (dialogMoreDiv) {
				dialogMoreDiv.innerHTML = htmlMore;
			}

			const dialog = document.getElementById(idDialog);
			const openDialog = document.getElementById(buttonId);
			const closeDialog = document.getElementById(buttonClose);

			const toggleMore = document.getElementById(buttonMore);
			const moreDialog = document.getElementById(showMore);
			const dialogUrl = document.getElementById(glossaryUrl);

			if (!openDialog || !closeDialog || !dialog) {
				return;
			}

			// Update button opens a modal dialog
			openDialog.addEventListener("click", () => {
				(dialog as HTMLDialogElement).showModal();
			});

			// Form cancel button closes the dialog box
			closeDialog.addEventListener("click", () => {
				(dialog as HTMLDialogElement).close();
			});

			const toggleDisplay = (element: HTMLElement | null) => {
				if (element) {
					element.style.display =
						element.style.display === "none" ? "block" : "none";
				}
			};

			toggleMore?.addEventListener("click", () => {
				toggleDisplay(moreDialog);
				toggleDisplay(dialogUrl);
				toggleMore.innerHTML =
					toggleMore.innerHTML === "Show less" ? "Show more" : "Show less";
			});

			// Close the dialog when clicked outside
			window.addEventListener("click", (event) => {
				if (event.target === dialog) {
					(dialog as HTMLDialogElement).close();
					if (moreDialog) {
						moreDialog.style.display = "none";
					}
					if (dialogUrl) {
						dialogUrl.style.display = "block";
					}
				}
			});
		}
	}
	customElements.define("my-modal", MyModal);
</script>

<style is:global>
	.glossary-separator {
		color: rgb(146, 52, 88);
		margin: -10px 0px 0px 0px;
	}

	.glossary-url {
		margin: 0px 0px 0px 0px;
	}

	.glossary-url-div {
		margin: 10px 0px 0px 0px;
	}

	.glossary-url {
		color: var(--url-colour) !important;
	}

	.glossary-url:hover {
		color: var(--url-colour-hover) !important;
		cursor: pointer;
	}

	.modal-dialog {
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
		max-width: 100%;
		width: 1000px;
		height: max-content;
		border: 2px solid rgb(146, 52, 88);
		line-height: 20px;
		border-radius: 5px;
	}

	.dialog-button {
		float: none !important;
		padding-top: 10px !important;
		padding-bottom: 0px !important;
	}

	.dialog-button-close {
		width: 49% !important;
		float: left !important;
		border: 2px solid rgb(146, 52, 88);
		padding: 10px;
		border-radius: 5px;
	}

	.dialog-button-more {
		width: 49% !important;
		float: right !important;
		border: 2px solid rgb(146, 52, 88);
		padding: 10px;
		border-radius: 5px;
	}

	.dialog-content {
		padding: 0px !important;
		margin-bottom: 5px !important;
		white-space: pre-wrap !important;
	}

	.dialog-show-more {
		padding-bottom: 10px !important;
		margin-top: -20px !important;
		white-space: pre-wrap !important;
	}

	.dialog-button-open {
		border-radius: 6px !important;
		padding: 0px 2px 2px 2px !important;
		background-color: rgb(31, 138, 123) !important;
		color: rgb(228, 222, 222) !important;
	}

	.dialog-button-open:hover {
		background-color: rgb(34, 199, 191) !important;
		color: black !important;
	}
</style>
